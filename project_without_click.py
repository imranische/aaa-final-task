import random


class Pizza:
    availible_recipes = {
        'Margherita': {
            'pizza_symbol': 'üßÄ',
            'recipe': ['tomato sause', 'mozzarella', 'tomatoes']
            },
        'Peperroni': {
            'pizza_symbol': 'üçï',
            'recipe': ['tomato sause', 'mozzarella', 'peperroni']
            },
        'Hawaiian': {
            'pizza_symbol': 'üçç',
            'recipe': ['tomato sause', 'mozzarella', 'chicken', 'pineapples']
            }
        }

    orders = []

    def __init__(self, name, size='XL', order_type='delivery'):
        """
        self.name - –∏–º—è –ø–∏—Ü—Ü—ã
        self.size - —Ä–∞–∑–º–µ—Ä –ø–∏—Ü—Ü—ã
        self.recipe - —Ä–µ—Ü–µ–ø—Ç –ø–∏—Ü—Ü—ã
        self.order_type - —Ç–∏–ø –∑–∞–∫–∞–∑–∞ (delivery/din_in)
        self.cook_time - –≤—Ä–µ–º—è –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è –ø–∏—Ü—Ü—ã: —Å–ª—É—á–∞–π–Ω–æ–µ —á–∏—Å–ª–æ –æ—Ç 7 –¥–æ 15 –º–∏–Ω
        self.delivery_time - –≤—Ä–µ–º—è –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è –ø–∏—Ü—Ü—ã: —Å–ª—É—á–∞–π–Ω–æ–µ —á–∏—Å–ª–æ –æ—Ç 7 –¥–æ 15 –º–∏–Ω (—Ç–æ–ª—å–∫–æ –¥–ª—è –¥–æ—Å—Ç–∞–≤–∫–∏)
        self.order_id - id –∑–∞–∫–∞–∑–∞
        """
        self.name = name.lower()
        self.size = size
        self.recipe = self.set_recipe()
        self.order_type = order_type
        self.cook_time = random.randint(7, 15)
        if order_type == 'delivery':
            self.delivery_time = random.randint(5, 45)
        # —Å–æ–∑–¥–∞—ë–º id –∑–∞–∫–∞–∑–∞
        self.order_id = next(__class__.id_generator)
        # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Å–µ —ç–∫–∑–µ–º–ø–ª—è—Ä—ã –∫–ª–∞—Å—Å–∞ –≤ —Å–ø–∏—Å–æ–∫ orders, —á—Ç–æ–±—ã –Ω–µ –ø–æ—Ç–µ—Ä—è—Ç—å –Ω–∞—à–∏ –∑–∞–∫–∞–∑—ã
        self.__class__.orders.append(self)

    def set_recipe(self):
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–µ—Ü–µ–ø—Ç –ø–∏—Ü—Ü—ã, —è–≤–ª—è—é—â–µ–π—Å—è —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–º –∫–ª–∞—Å—Å–∞ Pizza.
        –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –≤—ã–∑–æ–≤–∞ –º–µ—Ç–æ–¥–∞ pizza_dict
        """
        name = self.name.capitalize()

        if name in self.__class__.availible_recipes:
            recipe = {name: self.__class__.availible_recipes[name]}
            return recipe
        return

    def pizza_dict(self):
        """
        –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ –∫–∞—á–µ—Å—Ç–≤–µ –º–µ—Ç–æ–¥–∞ dict(). –í—ã–≤–æ–¥–∏—Ç —Ä–µ—Ü–µ–ø—Ç —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –∫–ª–∞—Å—Å–∞ Pizza
        """
        for key, value in self.recipe.items():
            print(f'{key}:\n')
            for el in value:
                print(f'‚Äî {el}')

    @classmethod
    def menu(cls):
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –º–µ–Ω—é –≤ –≤–∏–¥–µ —Å–ª–æ–≤–∞—Ä—è
        """
        return cls.availible_recipes

    @staticmethod
    def counter():
        """
        –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –Ω–∞—Ç—É—Ä–∞–ª—å–Ω—ã—Ö —á–∏—Å–µ–ª –¥–ª—è –ø—Ä–∏—Å–≤–æ–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞–º –∏—Ö id
        """
        i = 1
        while True:
            yield i
            i += 1

    id_generator = counter()


def order():
    """–ì–æ—Ç–æ–≤–∏—Ç –∏ –¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –ø–∏—Ü—Ü—É"""
    print('–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –°–µ–π—á–∞—Å —É –Ω–∞—Å –≤ –Ω–∞–ª–∏—á–∏–∏ —Å–ª–µ–¥—É—é—â–∏–µ –ø–∏—Ü—Ü—ã:')
    print(*Pizza.availible_recipes)
    pizza = input('–ö–∞–∫—É—é –ø–∏—Ü—Ü—É –≤—ã —Ö–æ—Ç–∏—Ç–µ –∑–∞–∫–∞–∑–∞—Ç—å?').capitalize()
    while pizza not in Pizza.availible_recipes:
        print('–ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–æ–µ –∏–º—è –ø–∏—Ü—Ü—ã. –°–µ–π—á–∞—Å —É –Ω–∞—Å –≤ –Ω–∞–ª–∏—á–∏–∏:')
        print(*Pizza.availible_recipes)
        pizza = input('–ö–∞–∫—É—é –ø–∏—Ü—Ü—É –≤—ã —Ö–æ—Ç–∏—Ç–µ –∑–∞–∫–∞–∑–∞—Ç—å?').capitalize()

    order_status = input('–î–ª—è –¥–æ—Å—Ç–∞–≤–∫–∏ –≤–≤–µ–¥–∏—Ç–µ "delivery", –¥–ª—è –æ–±–µ–¥–∞ –≤ –ø–∏—Ü—Ü–µ—Ä–∏–∏ - "dine_in"').lower()
    while order_status not in {'delivery', 'dine_in'}:
        order_status = input('–ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∞—è –æ–ø—Ü–∏—è. –í–≤–µ–¥–∏—Ç–µ "delivery" –∏–ª–∏ "dine_in"').lower()

    pizza_size = input('–£–∫–∞–∂–∏—Ç–µ —Ä–∞–∑–º–µ—Ä –ø–∏—Ü—Ü—ã ("L" –∏–ª–∏ "XL"):').upper()
    while pizza_size not in {'L', 'XL'}:
        pizza_size = input('–ù–µ–∫–æ—Ä–µ–∫—Ç–Ω—ã–π —Ä–∞–∑–º–µ—Ä. –í–≤–µ–¥–∏—Ç–µ "L" –∏–ª–∏ "XL"').upper()

    new_order = Pizza(pizza, size=pizza_size, order_type=order_status)
    print(f'–ó–∞–∫–∞–∑ ‚Ññ{new_order.order_id} –ø—Ä–∏–Ω—è—Ç. –°–ø–∞—Å–∏–±–æ! –í—ã –∑–∞–∫–∞–∑–∞–ª–∏ {new_order.name} {new_order.size} —Å –æ–ø—Ü–∏–µ–π {new_order.order_type}')
    print(f"üë®‚Äçüç≥ –û–∂–∏–¥–∞–µ–º–æ–µ –≤—Ä–µ–º—è –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è {new_order.cook_time} –º–∏–Ω")
    if new_order.order_type == 'delivery':
        print(f"üöó –û–∂–∏–¥–∞–µ–º–æ–µ –≤—Ä–µ–º—è –¥–æ—Å—Ç–∞–≤–∫–∏ {new_order.delivery_time} –º–∏–Ω")
        print(f"üè†  –ó–∞–∫–∞–∑ –±—É–¥–µ—Ç —É –≤–∞—Å –ø—Ä–∏–º–µ—Ä–Ω–æ —á–µ—Ä–µ–∑ {new_order.cook_time + new_order.delivery_time} –º–∏–Ω")
    return new_order


def print_order_list():
    """
    –í—ã–≤–æ–¥–∏—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Å–¥–µ–ª–∞–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤
    """
    print('–ë—ã–ª–∏ –∑–∞–∫–∞–∑–∞–Ω—ã –ø–∏—Ü—Ü—ã:')
    for el in Pizza.orders:
        if el.order_type == 'delivery':
            order_type = '–Ω–∞ –¥–æ—Å—Ç–∞–≤–∫—É'
        else:
            order_type = '–≤ –ø–∏—Ü–µ—Ä–∏–∏'

        print(f'{el.order_id}) {el.name.capitalize()} {el.size} {order_type}')


def menu():
    """–í—ã–≤–æ–¥–∏—Ç –º–µ–Ω—é"""
    my_menu = Pizza.menu()
    print('–ù–∞—à–µ –º–µ–Ω—é:')
    for item in my_menu:
        print(f'{item} {my_menu[item]["pizza_symbol"]}:')
        for el in my_menu[item]['recipe']:
            print(f'- {el}')
        print()


if __name__ == '__main__':
    # —Å–Ω–∞—á–∞–ª–∞ –ø–æ–∫–∞–∂–µ–º –º–µ–Ω—é, –∞ –ø–æ—Ç–æ–º –ø–æ–ø—Ä–æ—Å–∏–º —Å–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑
    # –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫–∞–∑–æ–≤ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    menu()
    order()
    print('–•–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å –µ—â—ë –∑–∞–∫–∞–∑? –ù–∞–∂–º–∏—Ç–µ "yes". –ï—Å–ª–∏ –Ω–µ—Ç - –Ω–∞–∂–º–∏—Ç–µ –ª—é–±—É—é –∫–Ω–æ–ø–∫—É')
    answer = input().lower()
    while answer == 'yes':
        order()
        print('–•–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å –µ—â—ë –∑–∞–∫–∞–∑? –ù–∞–∂–º–∏—Ç–µ "yes". –ï—Å–ª–∏ –Ω–µ—Ç - –Ω–∞–∂–º–∏—Ç–µ –ª—é–±—É—é –∫–Ω–æ–ø–∫—É')
        answer = input().lower()

    # –≤—ã–≤–µ–¥–µ–º –≤—Å–µ —Å–¥–µ–ª–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑—ã
    print_order_list()
