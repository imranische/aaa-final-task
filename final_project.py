import click
import random


class Pizza:
    availible_recipes = {
        'Margherita': {
            'pizza_symbol': 'üßÄ',
            'recipe': ['tomato sause', 'mozzarella', 'tomatoes']
        },
        'Peperroni': {
            'pizza_symbol': 'üçï',
            'recipe': ['tomato sause', 'mozzarella', 'peperroni']
        },
        'Hawaiian': {
            'pizza_symbol': 'üçç',
            'recipe': ['tomato sause', 'mozzarella', 'chicken', 'pineapples']
        }
    }

    orders = []

    def __init__(self, name, size='XL', order_type='delivery'):
        """
        self.name - –∏–º—è –ø–∏—Ü—Ü—ã
        self.size - —Ä–∞–∑–º–µ—Ä –ø–∏—Ü—Ü—ã
        self.recipe - —Ä–µ—Ü–µ–ø—Ç –ø–∏—Ü—Ü—ã
        self.order_type - —Ç–∏–ø –∑–∞–∫–∞–∑–∞ (delivery/din_in)
        self.cook_time - –≤—Ä–µ–º—è –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è –ø–∏—Ü—Ü—ã: —Å–ª—É—á–∞–π–Ω–æ–µ —á–∏—Å–ª–æ –æ—Ç 7 –¥–æ 15 –º–∏–Ω
        self.delivery_time - –≤—Ä–µ–º—è –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è –ø–∏—Ü—Ü—ã: —Å–ª—É—á–∞–π–Ω–æ–µ —á–∏—Å–ª–æ –æ—Ç 7 –¥–æ 15 –º–∏–Ω (—Ç–æ–ª—å–∫–æ –¥–ª—è –¥–æ—Å—Ç–∞–≤–∫–∏)
        """
        self.name = name
        self.size = size
        self.recipe = self.set_recipe()
        self.order_type = order_type
        self.cook_time = random.randint(7, 15)
        if order_type == 'delivery':
            self.delivery_time = random.randint(5, 45)
        # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Å–µ —ç–∫–∑–µ–º–ø–ª—è—Ä—ã –∫–ª–∞—Å—Å–∞ –≤ —Å–ø–∏—Å–æ–∫ orders, —á—Ç–æ–±—ã –Ω–µ –ø–æ—Ç–µ—Ä—è—Ç—å –Ω–∞—à–∏ –∑–∞–∫–∞–∑—ã
        self.__class__.orders.append(self)

    def set_recipe(self):
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–µ—Ü–µ–ø—Ç –ø–∏—Ü—Ü—ã, —è–≤–ª—è—é—â–µ–π—Å—è —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–º –∫–ª–∞—Å—Å–∞ Pizza.
        –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –≤—ã–∑–æ–≤–∞ –º–µ—Ç–æ–¥–∞ pizza_dict
        """
        name = self.name.capitalize()

        if name in self.__class__.availible_recipes:
            recipe = {name: self.__class__.availible_recipes[name]}
            return recipe
        return

    def pizza_dict(self):
        """
        –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ –∫–∞—á–µ—Å—Ç–≤–µ –º–µ—Ç–æ–¥–∞ dict(). –í—ã–≤–æ–¥–∏—Ç —Ä–µ—Ü–µ–ø—Ç —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –∫–ª–∞—Å—Å–∞ Pizza
        """
        for key, value in self.recipe.items():
            print(f'{key}:\n')
            for el in value:
                print(f'‚Äî {el}')

    @classmethod
    def menu(cls):
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –º–µ–Ω—é –≤ –≤–∏–¥–µ —Å–ª–æ–≤–∞—Ä—è
        """
        return cls.availible_recipes


@click.group()
def cli():
    pass


@cli.command()
@click.option('--delivery', default=False, is_flag=True)
@click.argument('pizza', nargs=1)
def order(pizza: str, delivery: bool):
    """–ì–æ—Ç–æ–≤–∏—Ç –∏ –¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –ø–∏—Ü—Ü—É"""
    if delivery:
        order_status = 'delivery'
    else:
        order_status = 'dine_in'
    if pizza.capitalize() not in Pizza.availible_recipes:
        click.echo('–ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–æ–µ –∏–º—è –ø–∏—Ü—Ü—ã. –°–µ–π—á–∞—Å —É –Ω–∞—Å –≤ –Ω–∞–ª–∏—á–∏–∏:')
        print(*Pizza.availible_recipes)
    else:
        new_order = Pizza(pizza, order_type=order_status)
        click.echo(
            f'–ó–∞–∫–∞–∑ –ø—Ä–∏–Ω—è—Ç. –°–ø–∞—Å–∏–±–æ! –í—ã –∑–∞–∫–∞–∑–∞–ª–∏ {new_order.name} {new_order.size} —Å –æ–ø—Ü–∏–µ–π {new_order.order_type}')
        click.echo(f"üë®‚Äçüç≥ –û–∂–∏–¥–∞–µ–º–æ–µ –≤—Ä–µ–º—è –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è {new_order.cook_time} –º–∏–Ω")
        if new_order.order_type == 'delivery':
            click.echo(f"üöó –û–∂–∏–¥–∞–µ–º–æ–µ –≤—Ä–µ–º—è –¥–æ—Å—Ç–∞–≤–∫–∏ {new_order.delivery_time} –º–∏–Ω")
            click.echo(f"üè† –ó–∞–∫–∞–∑ –±—É–¥–µ—Ç —É –≤–∞—Å –ø—Ä–∏–º–µ—Ä–Ω–æ —á–µ—Ä–µ–∑ {new_order.cook_time + new_order.delivery_time} –º–∏–Ω")
        return new_order


@cli.command()
def menu():
    """–í—ã–≤–æ–¥–∏—Ç –º–µ–Ω—é"""
    my_menu = Pizza.menu()
    for item in my_menu:
        click.echo(f'{item} {my_menu[item]["pizza_symbol"]}:')
        for el in my_menu[item]['recipe']:
            click.echo(f'- {el}')
        click.echo()


cli.add_command(order)
cli.add_command(menu)


if __name__ == '__main__':
    cli()
